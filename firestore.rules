rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Función para verificar si es super admin
    function isSuperAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    // Función para verificar si es residente, admin o super admin
    function isResidentOrAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['comunidad', 'admin', 'super_admin'];
    }
    
    // Función para verificar si es admin o super admin
    function isAdminOrSuperAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }
    
    // Función para verificar si está inscrito Y APROBADO en el Plan de Seguridad
    // Ahora busca en la colección securityRegistrations
    function isEnrolledInSecurityPlan() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/securityRegistrations/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/securityRegistrations/$(request.auth.uid)).data.status == 'active';
    }
    
    // Función para verificar si tiene acceso a funciones de seguridad
    // Requiere ser residente/admin y estar inscrito Y APROBADO en el plan (o ser admin/super_admin)
    function hasSecurityAccess() {
      return request.auth != null && 
        (isAdminOrSuperAdmin() || 
         (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'comunidad' && 
          isEnrolledInSecurityPlan()));
    }
    
    // Usuarios pueden leer/escribir su propio perfil
    // Admins y super admins pueden leer/escribir todos los perfiles
    // Permitir creación de perfil durante el registro
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, update, delete: if request.auth != null && 
        (request.auth.uid == userId || isAdminOrSuperAdmin());
    }
    
    // Reportes de pánico - REQUIERE PLAN DE SEGURIDAD para residentes
    match /panicReports/{reportId} {
      allow create: if hasSecurityAccess();
      allow read: if request.auth != null && 
        (isAdminOrSuperAdmin() || hasSecurityAccess());
      allow write: if isAdminOrSuperAdmin();
    }
    
    // Alertas comunitarias - REQUIERE PLAN DE SEGURIDAD para residentes
    match /alerts/{alertId} {
      allow create: if hasSecurityAccess();
      allow read: if request.auth != null;
      allow write: if isAdminOrSuperAdmin();
    }
    
    // Lugares - todos los usuarios autenticados pueden leer, admins y super admins pueden escribir
    match /places/{placeId} {
      allow read: if request.auth != null;
      allow write: if isAdminOrSuperAdmin();
    }
    
    // Servicios - todos los usuarios autenticados pueden leer, admins y super admins pueden escribir
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow write: if isAdminOrSuperAdmin();
    }
    
    // Cámaras - REQUIERE PLAN DE SEGURIDAD para residentes
    match /cameras/{cameraId} {
      allow read: if hasSecurityAccess();
      allow write: if isAdminOrSuperAdmin();
    }
    
    // Configuración del sistema - solo super admins pueden acceder
    match /systemConfig/{configId} {
      allow read, write: if isSuperAdmin();
    }
    
    // Solicitudes de registro - usuarios pueden crear sus propias solicitudes, super admins pueden gestionar todas
    match /registrationRequests/{requestId} {
      allow create: if request.auth != null && request.auth.uid == requestId;
      allow read, update, delete: if isSuperAdmin();
    }
    
    // Registros del Plan de Seguridad - usuarios pueden crear sus propias solicitudes, admins pueden gestionar todas
    match /securityRegistrations/{registrationId} {
      allow create: if request.auth != null && request.auth.uid == registrationId;
      allow read: if request.auth != null && 
        (request.auth.uid == registrationId || isAdminOrSuperAdmin());
      allow update, delete: if isAdminOrSuperAdmin();
    }
  }
}


