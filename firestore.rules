rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Función para verificar si es super admin
    function isSuperAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    // Función para verificar si es residente, admin o super admin
    function isResidentOrAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['comunidad', 'admin', 'super_admin'];
    }
    
    // Función para verificar si es admin o super admin
    function isAdminOrSuperAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }
    
    // Función auxiliar para verificar acceso al plan de seguridad
    // Nota: Como no podemos hacer queries en las reglas, esta función se simplifica
    // La verificación real se hace en el backend mediante APIs
    function hasSecurityPlanAccess() {
      return request.auth != null;
    }
    
    // Función para verificar si tiene acceso a funciones de seguridad
    // Los admins siempre tienen acceso, los residentes deben estar en el plan (verificado por backend)
    function hasSecurityAccess() {
      return request.auth != null && 
        (isAdminOrSuperAdmin() || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'comunidad');
    }
    
    // Usuarios pueden leer/escribir su propio perfil
    // Admins y super admins pueden leer/escribir todos los perfiles
    // Permitir creación de perfil durante el registro
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, update, delete: if request.auth != null && 
        (request.auth.uid == userId || isAdminOrSuperAdmin());
    }
    
    // Reportes de pánico - REQUIERE PLAN DE SEGURIDAD para residentes
    match /panicReports/{reportId} {
      allow create: if hasSecurityAccess();
      // Permitir lectura si:
      // - Es admin/super admin
      // - Tiene acceso al plan de seguridad
      // - Está en la lista de usuarios notificados del reporte
      allow read: if request.auth != null && 
        (isAdminOrSuperAdmin() || 
         hasSecurityAccess() ||
         request.auth.uid in resource.data.notifiedUsers);
      // Permitir actualización si:
      // - Es admin/super admin
      // - Es el creador del reporte
      // - Está en la lista de notificados Y solo actualiza acknowledgedBy
      allow update: if request.auth != null && 
        (isAdminOrSuperAdmin() || 
         request.auth.uid == resource.data.userId ||
         (request.auth.uid in resource.data.notifiedUsers && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['acknowledgedBy'])));
      allow delete: if isAdminOrSuperAdmin();
    }
    
    // Alertas comunitarias - REQUIERE PLAN DE SEGURIDAD para residentes
    match /alerts/{alertId} {
      allow create: if hasSecurityAccess();
      allow read: if request.auth != null;
      allow write: if isAdminOrSuperAdmin();
    }
    
    // Lugares - todos los usuarios autenticados pueden leer, admins y super admins pueden escribir
    match /places/{placeId} {
      allow read: if request.auth != null;
      allow write: if isAdminOrSuperAdmin();
    }
    
    // Servicios - todos los usuarios autenticados pueden leer, admins y super admins pueden escribir
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow write: if isAdminOrSuperAdmin();
    }
    
    // Cámaras - REQUIERE PLAN DE SEGURIDAD para residentes
    match /cameras/{cameraId} {
      allow read: if hasSecurityAccess();
      allow write: if isAdminOrSuperAdmin();
    }
    
    // Sistema de presencia - usuarios pueden actualizar su propia presencia
    match /presence/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Configuración del sistema - solo super admins pueden acceder
    match /systemConfig/{configId} {
      allow read, write: if isSuperAdmin();
    }
    
    // Solicitudes de registro - usuarios pueden crear sus propias solicitudes, super admins pueden gestionar todas
    match /registrationRequests/{requestId} {
      allow create: if request.auth != null && request.auth.uid == requestId;
      allow read, update, delete: if isSuperAdmin();
    }
    
    // Registros del Plan de Seguridad
    // - Crear: cualquier usuario autenticado (el backend verificará que el userId coincida)
    // - Leer: el dueño del registro (comparando userId en el documento), admins, o usuarios con acceso al plan
    // - Update/Delete: solo admins
    match /securityRegistrations/{registrationId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         isAdminOrSuperAdmin() || 
         hasSecurityAccess());
      allow update, delete: if isAdminOrSuperAdmin();
    }
    
    // Configuraciones del botón de pánico - usuarios pueden gestionar su propia configuración
    match /panicButtonSettings/{userId} {
      allow create, read, update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && 
        (request.auth.uid == userId || isAdminOrSuperAdmin());
      allow read: if isAdminOrSuperAdmin();
    }
    
    // Chat de emergencia de pánico
    // Los usuarios con acceso al plan de seguridad pueden participar en el chat
    // La verificación específica de si tienen acceso a una alerta se hace en el cliente
    match /panicChats/{messageId} {
      // Permitir crear mensajes si el usuario está autenticado y tiene acceso al plan de seguridad
      allow create: if request.auth != null && 
                      hasSecurityAccess() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['alertId', 'userId', 'userName', 'message', 'timestamp']);
      
      // Permitir leer mensajes si el usuario tiene acceso al plan de seguridad
      allow read: if request.auth != null && hasSecurityAccess();
      
      // No permitir editar mensajes (son inmutables)
      // Solo admins pueden eliminar mensajes
      allow update: if false;
      allow delete: if isAdminOrSuperAdmin();
    }
  }
}


