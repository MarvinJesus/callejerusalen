const admin = require('firebase-admin');
const path = require('path');

// Inicializar Firebase Admin
const serviceAccount = require(path.join(__dirname, '../callejerusalen-a78aa-firebase-adminsdk-fbsvc-8b0a2b1499.json'));

if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}

const db = admin.firestore();

async function checkUserSecurityStatus() {
  try {
    console.log('üîç Verificando estado del usuario Marvin en la base de datos...\n');

    const userId = 'qwBKaOMEZCgePXPTHsuNhAoz9uC2'; // Marvin Calvo

    // 1. Verificar usuario en la colecci√≥n users
    console.log('üìã 1. Verificando usuario en colecci√≥n "users":');
    const userDoc = await db.collection('users').doc(userId).get();
    
    if (userDoc.exists) {
      const userData = userDoc.data();
      console.log(`   ‚úÖ Usuario encontrado: ${userData.displayName}`);
      console.log(`   üìß Email: ${userData.email}`);
      console.log(`   üè∑Ô∏è  Rol: ${userData.role}`);
      console.log(`   üìä Estado: ${userData.status}`);
      console.log(`   üîê Activo: ${userData.isActive}`);
      console.log(`   üìã Registro: ${userData.registrationStatus}`);
      
      if (userData.securityPlan) {
        console.log(`   ‚ö†Ô∏è  A√öN TIENE CAMPO securityPlan:`, userData.securityPlan);
      } else {
        console.log(`   ‚úÖ Campo securityPlan eliminado correctamente`);
      }
    } else {
      console.log(`   ‚ùå Usuario no encontrado en colecci√≥n users`);
    }

    console.log('\nüìã 2. Verificando registro en colecci√≥n "securityRegistrations":');
    
    // 2. Buscar en securityRegistrations por userId
    const registrationsSnapshot = await db.collection('securityRegistrations').get();
    
    let foundRegistration = null;
    registrationsSnapshot.docs.forEach(doc => {
      const data = doc.data();
      if (data.userId === userId) {
        foundRegistration = { id: doc.id, ...data };
      }
    });

    if (foundRegistration) {
      console.log(`   ‚úÖ Registro encontrado: ${foundRegistration.id}`);
      console.log(`   üë§ Nombre: ${foundRegistration.userDisplayName}`);
      console.log(`   üìß Email: ${foundRegistration.userEmail}`);
      console.log(`   üìû Tel√©fono: ${foundRegistration.phoneNumber}`);
      console.log(`   üìç Direcci√≥n: ${foundRegistration.address}`);
      console.log(`   üïí Disponibilidad: ${foundRegistration.availability}`);
      console.log(`   üõ†Ô∏è  Habilidades: ${foundRegistration.skills?.join(', ') || 'N/A'}`);
      console.log(`   üìä Estado: ${foundRegistration.status}`);
      console.log(`   üìÖ Enviado: ${foundRegistration.submittedAt?.toDate?.() || foundRegistration.submittedAt}`);
      console.log(`   üë®‚Äçüíº Revisado por: ${foundRegistration.reviewedBy || 'N/A'}`);
      console.log(`   üìÖ Revisado: ${foundRegistration.reviewedAt?.toDate?.() || foundRegistration.reviewedAt}`);
      console.log(`   üìù Notas: ${foundRegistration.reviewNotes || 'N/A'}`);
      
      if (foundRegistration.status === 'active') {
        console.log(`   ‚úÖ ESTADO: APROBADO - El usuario deber√≠a tener acceso`);
      } else if (foundRegistration.status === 'pending') {
        console.log(`   ‚è≥ ESTADO: PENDIENTE - El usuario NO deber√≠a tener acceso`);
      } else if (foundRegistration.status === 'rejected') {
        console.log(`   ‚ùå ESTADO: RECHAZADO - El usuario NO deber√≠a tener acceso`);
      }
    } else {
      console.log(`   ‚ùå No se encontr√≥ registro en securityRegistrations para userId: ${userId}`);
    }

    console.log('\nüîç 3. Resumen:');
    console.log(`   üë§ Usuario: ${userDoc.exists ? '‚úÖ Existe' : '‚ùå No existe'}`);
    console.log(`   üìã Registro: ${foundRegistration ? '‚úÖ Existe' : '‚ùå No existe'}`);
    console.log(`   üìä Estado: ${foundRegistration?.status || 'N/A'}`);
    console.log(`   üéØ Acceso esperado: ${foundRegistration?.status === 'active' ? '‚úÖ S√ç' : '‚ùå NO'}`);

  } catch (error) {
    console.error('‚ùå Error verificando estado del usuario:', error);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  checkUserSecurityStatus()
    .then(() => {
      console.log('\n‚úÖ Verificaci√≥n completada');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Error ejecutando verificaci√≥n:', error);
      process.exit(1);
    });
}

module.exports = { checkUserSecurityStatus };
