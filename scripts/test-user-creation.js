const fs = require('fs');
const path = require('path');

console.log('üß™ Prueba de Creaci√≥n de Usuarios');
console.log('================================\n');

async function testUserCreation() {
  try {
    // Verificar que el servidor est√© corriendo
    console.log('üîÑ Verificando conexi√≥n con el servidor...');
    
    const response = await fetch('http://localhost:3000/api/logs', {
      method: 'GET'
    });
    
    if (!response.ok) {
      throw new Error(`Servidor no responde correctamente: ${response.status}`);
    }
    
    console.log('‚úÖ Servidor funcionando correctamente');
    
    // Verificar archivos necesarios
    const authFile = path.join(process.cwd(), 'lib', 'auth.ts');
    const adminFile = path.join(process.cwd(), 'app', 'admin', 'page.tsx');
    
    if (!fs.existsSync(authFile)) {
      throw new Error('Archivo lib/auth.ts no encontrado');
    }
    
    if (!fs.existsSync(adminFile)) {
      throw new Error('Archivo app/admin/page.tsx no encontrado');
    }
    
    console.log('‚úÖ Archivos necesarios encontrados');
    
    // Verificar que las funciones est√©n implementadas
    const authContent = fs.readFileSync(authFile, 'utf8');
    
    if (!authContent.includes('checkEmailExists')) {
      throw new Error('Funci√≥n checkEmailExists no encontrada en lib/auth.ts');
    }
    
    if (!authContent.includes('createUserAsAdmin')) {
      throw new Error('Funci√≥n createUserAsAdmin no encontrada en lib/auth.ts');
    }
    
    console.log('‚úÖ Funciones de autenticaci√≥n implementadas');
    
    // Verificar el panel de administraci√≥n
    const adminContent = fs.readFileSync(adminFile, 'utf8');
    
    if (!adminContent.includes('CreateUserModal')) {
      throw new Error('Componente CreateUserModal no encontrado en app/admin/page.tsx');
    }
    
    if (!adminContent.includes('handleEmailChange')) {
      throw new Error('Funci√≥n handleEmailChange no encontrada en el modal');
    }
    
    console.log('‚úÖ Componentes de administraci√≥n implementados');
    
    console.log('\nüéâ ¬°Sistema de creaci√≥n de usuarios listo!');
    console.log('\nüìã Funcionalidades implementadas:');
    console.log('‚úÖ Validaci√≥n de email en tiempo real');
    console.log('‚úÖ Verificaci√≥n de disponibilidad de email');
    console.log('‚úÖ Mensajes de error espec√≠ficos');
    console.log('‚úÖ Indicadores visuales de validaci√≥n');
    console.log('‚úÖ Prevenci√≥n de env√≠o con errores');
    
    console.log('\nüß™ Para probar:');
    console.log('1. Ve a http://localhost:3000/admin');
    console.log('2. Haz clic en "Crear Nuevo Usuario"');
    console.log('3. Intenta ingresar un email existente');
    console.log('4. Verifica que aparezca el mensaje de error');
    console.log('5. Intenta ingresar un email nuevo');
    console.log('6. Verifica que aparezca el check verde');
    console.log('7. Completa el formulario y crea el usuario');
    
    console.log('\n‚ö†Ô∏è  Posibles errores a verificar:');
    console.log('- "El email ya est√° registrado en Firebase Authentication"');
    console.log('- "El email ya est√° registrado en el sistema"');
    console.log('- "El formato del email no es v√°lido"');
    console.log('- "La contrase√±a es muy d√©bil"');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    
    if (error.message.includes('Servidor no responde')) {
      console.log('\nüí° Soluciones:');
      console.log('1. Aseg√∫rate de que el servidor est√© corriendo: npm run dev');
      console.log('2. Verifica que est√© en el puerto 3000');
      console.log('3. Revisa la consola del servidor para errores');
    }
  }
}

testUserCreation();
